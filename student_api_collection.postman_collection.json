{
	"info": {
		"_postman_id": "4320e8ca-4864-4234-be06-285e80fb62b6",
		"name": "student_api_collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29960974",
		"_collection_link": "https://www.postman.com/shubhangikalbande/workspace/myworkspace/collection/29960974-4320e8ca-4864-4234-be06-285e80fb62b6?action=share&source=collection_link&creator=29960974"
	},
	"item": [
		{
			"name": "myfolder",
			"item": [
				{
					"name": "get single student",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//assertions for resonse code\r",
									"\r",
									"\r",
									"pm.test(\"testing status code is 200\",()=>{\r",
									"\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"successful get request\",()=>{\r",
									"\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
									"});\r",
									"// assertions for headers\r",
									"pm.test(\"content type header is present\",()=>{\r",
									"\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"  to test the value of content type\",()=>{\r",
									"\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"// assertions for cookies\r",
									"\r",
									"pm.test(\"to test cookie is present\",()=>{\r",
									"\r",
									"    pm.expect(pm.cookies.has('language')).to.be.true;\r",
									"})\r",
									"\r",
									"pm.test(\"to test cookie has a value\",()=>{\r",
									"\r",
									"\r",
									"    pm.expect(pm.cookies.get('language')).to.eql('en-gb')\r",
									"})\r",
									"\r",
									"// test will fail as we dont hav cookies for this test\r",
									"\r",
									"//assertions for response time\r",
									"\r",
									"pm.test(\"response time should be less than 200ms\",()=>{\r",
									"\r",
									"    pm.expect(pm.response.responseTime).to.lessThan(200)\r",
									"})\r",
									"\r",
									"//assertions for response body\r",
									"\r",
									"let jsonData=pm.response.json()\r",
									"pm.test(\" to test  datatype of response\",()=>{\r",
									"\r",
									"    pm.expect(jsonData).to.be.an(\"object\")\r",
									"    pm.expect(jsonData.name).to.be.a(\"string\")\r",
									"    pm.expect(jsonData.id).to.be.a(\"number\")\r",
									"    pm.expect(jsonData.courses).to.be.an(\"array\")\r",
									"})\r",
									"\r",
									"//to test English is part of the courses\r",
									"pm.test(\"to test english is the part of the courses\",()=>{\r",
									"\r",
									"    pm.expect(jsonData.courses).to.include('English')\r",
									"\r",
									"    //courses array must include all listed\r",
									"\r",
									"    pm.expect(jsonData.courses).to.have.members([\"Mathematics\",\r",
									"            \"English\",\r",
									"            \"Science\"])\r",
									"})\r",
									"\r",
									"//assertions for json fields\r",
									"pm.test(\"to test the value of the fields\",()=>{\r",
									"\r",
									"    let jsondata=pm.response.json()\r",
									"    pm.expect(jsondata.id).to.eql(10)\r",
									"    pm.expect(jsondata.name).to.eql(\" shubhangi kalbande\")\r",
									"    pm.expect(jsondata.location).to.eql(\"New York\")\r",
									"    pm.expect(jsondata.phone).to.eql(\"+1 (123) 456-7890\")\r",
									"    pm.expect(jsondata.courses[0]).to.eql( \"Mathematics\")\r",
									"    \r",
									"    })\r",
									"\r",
									"    //aseertion for schema validation\r",
									"    //schema\r",
									"\r",
									"    let jsondata=pm.response.json()\r",
									"    var schema=\r",
									"\r",
									"{\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"studentexample\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"id\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"name\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"location\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"phone\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"courses\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              ]\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"id\",\r",
									"            \"name\",\r",
									"            \"location\",\r",
									"            \"phone\",\r",
									"            \"courses\"\r",
									"          ]\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"id\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"name\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"location\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"phone\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"courses\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              ]\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"id\",\r",
									"            \"name\",\r",
									"            \"location\",\r",
									"            \"phone\",\r",
									"            \"courses\"\r",
									"          ]\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"id\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"name\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"location\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"phone\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"courses\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              ]\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"id\",\r",
									"            \"name\",\r",
									"            \"location\",\r",
									"            \"phone\",\r",
									"            \"courses\"\r",
									"          ]\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"id\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"name\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"location\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"phone\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"courses\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              ]\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"id\",\r",
									"            \"name\",\r",
									"            \"location\",\r",
									"            \"phone\",\r",
									"            \"courses\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"studentexample\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\" schema is valid\",()=>{\r",
									"        pm.expect(tv4.validate(jsondata,schema)).to.be.false;\r",
									"    })\r",
									"           \r",
									"    \r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/studentexample/10",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"studentexample",
								"10"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all students record",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assertions for response code\r",
									"pm.test(\"Testing status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Successful get request\", () => {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
									"});\r",
									"\r",
									"// Assertions for headers\r",
									"pm.test(\"Content type header is present\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"To test the value of content type\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"// Assertions for cookies\r",
									"pm.test(\"To test cookie is present\", () => {\r",
									"    pm.expect(pm.cookies.has('language')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"To test cookie has a value\", () => {\r",
									"    pm.expect(pm.cookies.get('language')).to.eql('en-gb');\r",
									"});\r",
									"\r",
									"// Assertions for response time\r",
									"pm.test(\"Response time should be less than 200ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(200);\r",
									"});\r",
									"\r",
									"// Assertions for response body\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"To test the datatype of response\", () => {\r",
									"    jsonData.forEach(studentexample => {\r",
									"        pm.expect(studentexample).to.be.an(\"object\");\r",
									"        pm.expect(studentexample.name).to.be.a(\"string\");\r",
									"        pm.expect(studentexample.id).to.be.a(\"number\");\r",
									"        pm.expect(studentexample.courses).to.be.an(\"array\");\r",
									"    });\r",
									"});\r",
									"\r",
									"// To test English is part of the courses\r",
									"pm.test(\"To test English is part of the courses\", () => {\r",
									"    jsonData.forEach(studentexample => {\r",
									"        pm.expect(studentexample.courses).to.include('English');\r",
									"    });\r",
									"});\r",
									"\r",
									"// Assertions for json fields\r",
									"pm.test(\"To test the value of the fields\", () => {\r",
									"    jsonData.forEach(studentexample => {\r",
									"        pm.expect(studentexample.id).to.eql(studentexample.id);\r",
									"        pm.expect(studentexample.name).to.eql(\" shubhangi kalbande\");\r",
									"        pm.expect(studentexample.location).to.eql(\"New York\");\r",
									"        pm.expect(studentexample.phone).to.eql(\"+1 (123) 456-7890\");\r",
									"        pm.expect(studentexample.courses).to.eql([\"Mathematics\", \"English\", \"Science\"]);\r",
									"    });\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"    \r",
									"\r",
									"\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"studentexample\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"id\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"name\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"location\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"phone\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"courses\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              ]\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"id\",\r",
									"            \"name\",\r",
									"            \"location\",\r",
									"            \"phone\",\r",
									"            \"courses\"\r",
									"          ]\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"id\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"name\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"location\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"phone\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"courses\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              ]\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"id\",\r",
									"            \"name\",\r",
									"            \"location\",\r",
									"            \"phone\",\r",
									"            \"courses\"\r",
									"          ]\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"id\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"name\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"location\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"phone\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"courses\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              ]\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"id\",\r",
									"            \"name\",\r",
									"            \"location\",\r",
									"            \"phone\",\r",
									"            \"courses\"\r",
									"          ]\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"id\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"name\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"location\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"phone\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"courses\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              ]\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"id\",\r",
									"            \"name\",\r",
									"            \"location\",\r",
									"            \"phone\",\r",
									"            \"courses\"\r",
									"          ]\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"id\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"name\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"location\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"phone\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"courses\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              ]\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"id\",\r",
									"            \"name\",\r",
									"            \"location\",\r",
									"            \"phone\",\r",
									"            \"courses\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"studentexample\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Schema is valid\", () => {\r",
									"    // Validate the JSON data against the schema here\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/studentexample",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"studentexample"
							]
						}
					},
					"response": []
				},
				{
					"name": " http://localhost:3000/studentexample",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//assertions for resonse code\r",
									"\r",
									"\r",
									"pm.test(\"testing status code is 200\",()=>{\r",
									"\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"successful get request\",()=>{\r",
									"\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);\r",
									"});\r",
									"// assertions for headers\r",
									"pm.test(\"content type header is present\",()=>{\r",
									"\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"  to test the value of content type\",()=>{\r",
									"\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"// assertions for cookies\r",
									"\r",
									"pm.test(\"to test cookie is present\",()=>{\r",
									"\r",
									"    pm.expect(pm.cookies.has('language')).to.be.true;\r",
									"})\r",
									"\r",
									"pm.test(\"to test cookie has a value\",()=>{\r",
									"\r",
									"\r",
									"    pm.expect(pm.cookies.get('language')).to.eql('en-gb')\r",
									"})\r",
									"\r",
									"// test will fail as we dont hav cookies for this test\r",
									"\r",
									"//assertions for response time\r",
									"\r",
									"pm.test(\"response time should be less than 200ms\",()=>{\r",
									"\r",
									"    pm.expect(pm.response.responseTime).to.lessThan(200)\r",
									"})\r",
									"\r",
									"//assertions for response body\r",
									"\r",
									"let jsonData=pm.response.json()\r",
									"pm.test(\" to test  datatype of response\",()=>{\r",
									"\r",
									"    pm.expect(jsonData).to.be.an(\"object\")\r",
									"    pm.expect(jsonData.name).to.be.a(\"string\")\r",
									"    pm.expect(jsonData.id).to.be.a(\"number\")\r",
									"    pm.expect(jsonData.courses).to.be.an(\"array\")\r",
									"})\r",
									"\r",
									"//to test English is part of the courses\r",
									"pm.test(\"to test english is the part of the courses\",()=>{\r",
									"\r",
									"    pm.expect(jsonData.courses).to.include(\"English\")\r",
									"\r",
									"    //courses array must include all listed\r",
									"\r",
									"    pm.expect(jsonData.courses).to.have.members([\"Mathematics\",\r",
									"            \"English\",\r",
									"            \"Science\"])\r",
									"})\r",
									"\r",
									"//assertions for json fields\r",
									"pm.test(\"to test the value of the fields\",()=>{\r",
									"\r",
									"    let jsondata=pm.response.json()\r",
									"    pm.expect(jsondata.id).to.eql(6)\r",
									"    pm.expect(jsondata.name).to.eql(\"savitaa kalbande\")\r",
									"    pm.expect(jsondata.location).to.eql(\"Californiaa\")\r",
									"    pm.expect(jsondata.phone).to.eql(\"+1 (123) 456-78980\")\r",
									"    pm.expect(jsondata.courses[0]).to.eql( \"English\")\r",
									"    \r",
									"    pm.expect(jsondata.courses[1]).to.eql( \"Science\")\r",
									"    \r",
									"    })\r",
									"\r",
									"    //aseertion for schema validation\r",
									"    //schema\r",
									"\r",
									"    let jsondata=pm.response.json()\r",
									"    var schema=\r",
									"\r",
									"{\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"studentexample\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"id\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"name\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"location\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"phone\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"courses\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              ]\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"id\",\r",
									"            \"name\",\r",
									"            \"location\",\r",
									"            \"phone\",\r",
									"            \"courses\"\r",
									"          ]\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"id\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"name\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"location\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"phone\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"courses\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              ]\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"id\",\r",
									"            \"name\",\r",
									"            \"location\",\r",
									"            \"phone\",\r",
									"            \"courses\"\r",
									"          ]\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"id\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"name\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"location\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"phone\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"courses\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              ]\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"id\",\r",
									"            \"name\",\r",
									"            \"location\",\r",
									"            \"phone\",\r",
									"            \"courses\"\r",
									"          ]\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"id\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"name\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"location\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"phone\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"courses\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              ]\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"id\",\r",
									"            \"name\",\r",
									"            \"location\",\r",
									"            \"phone\",\r",
									"            \"courses\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"studentexample\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\" schema is valid\",()=>{\r",
									"        pm.expect(tv4.validate(jsondata,schema)).to.be.false;\r",
									"    })\r",
									"           "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n      \"id\": 6,\r\n      \"name\": \"savitaa kalbandee\",\r\n      \"location\": \"Californiaa\",\r\n      \"phone\": \"+1 (123) 456-78980\",\r\n      \"courses\": [\"Mathematics\", \"English\", \"Science\"]\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/studentexample",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"studentexample"
							]
						}
					},
					"response": []
				},
				{
					"name": "update record whose id is 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//assertions for resonse code\r",
									"\r",
									"\r",
									"pm.test(\"testing status code is 200\",()=>{\r",
									"\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"successful get request\",()=>{\r",
									"\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
									"});\r",
									"// assertions for headers\r",
									"pm.test(\"content type header is present\",()=>{\r",
									"\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"  to test the value of content type\",()=>{\r",
									"\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"// assertions for cookies\r",
									"\r",
									"pm.test(\"to test cookie is present\",()=>{\r",
									"\r",
									"    pm.expect(pm.cookies.has('language')).to.be.true;\r",
									"})\r",
									"\r",
									"pm.test(\"to test cookie has a value\",()=>{\r",
									"\r",
									"\r",
									"    pm.expect(pm.cookies.get('language')).to.eql('en-gb')\r",
									"})\r",
									"\r",
									"// test will fail as we dont hav cookies for this test\r",
									"\r",
									"//assertions for response time\r",
									"\r",
									"pm.test(\"response time should be less than 200ms\",()=>{\r",
									"\r",
									"    pm.expect(pm.response.responseTime).to.lessThan(200)\r",
									"})\r",
									"\r",
									"//assertions for response body\r",
									"\r",
									"let jsonData=pm.response.json()\r",
									"pm.test(\" to test  datatype of response\",()=>{\r",
									"\r",
									"    pm.expect(jsonData).to.be.an(\"object\")\r",
									"    pm.expect(jsonData.name).to.be.a(\"string\")\r",
									"    pm.expect(jsonData.id).to.be.a(\"number\")\r",
									"    pm.expect(jsonData.courses).to.be.an(\"array\")\r",
									"})\r",
									"\r",
									"//to test English is part of the courses\r",
									"pm.test(\"to test english is the part of the courses\",()=>{\r",
									"\r",
									"    pm.expect(jsonData.courses).to.include(\"English\")\r",
									"\r",
									"    //courses array must include all listed\r",
									"\r",
									"    pm.expect(jsonData.courses).to.have.members([\"Mathematics\",\r",
									"        \"English\",\r",
									"        \"Science\",\r",
									"        \"Spanish\"])\r",
									"})\r",
									"\r",
									"//assertions for json fields\r",
									"pm.test(\"to test the value of the fields\",()=>{\r",
									"\r",
									"    let jsondata=pm.response.json()\r",
									"    pm.expect(jsondata.id).to.eql(6)\r",
									"    pm.expect(jsondata.name).to.eql(\"kamal kishhtanna\")\r",
									"    pm.expect(jsondata.location).to.eql(\"Yavatmall\")\r",
									"    pm.expect(jsondata.phone).to.eql(\"+1 (123) 456-78890\")\r",
									"    pm.expect(jsondata.courses[0]).to.eql( \"Mathematics\")\r",
									"    \r",
									"    })\r",
									"\r",
									"    //aseertion for schema validation\r",
									"    //schema\r",
									"\r",
									"    let jsondata=pm.response.json()\r",
									"    var schema=\r",
									"\r",
									"{\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"studentexample\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"id\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"name\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"location\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"phone\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"courses\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              ]\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"id\",\r",
									"            \"name\",\r",
									"            \"location\",\r",
									"            \"phone\",\r",
									"            \"courses\"\r",
									"          ]\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"id\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"name\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"location\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"phone\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"courses\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              ]\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"id\",\r",
									"            \"name\",\r",
									"            \"location\",\r",
									"            \"phone\",\r",
									"            \"courses\"\r",
									"          ]\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"id\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"name\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"location\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"phone\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"courses\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              ]\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"id\",\r",
									"            \"name\",\r",
									"            \"location\",\r",
									"            \"phone\",\r",
									"            \"courses\"\r",
									"          ]\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"id\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"name\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"location\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"phone\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"courses\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              ]\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"id\",\r",
									"            \"name\",\r",
									"            \"location\",\r",
									"            \"phone\",\r",
									"            \"courses\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"studentexample\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\" schema is valid\",()=>{\r",
									"        pm.expect(tv4.validate(jsondata,schema)).to.be.false;\r",
									"    })\r",
									"           \r",
									"    \r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n      \"id\": 6,\r\n      \"name\": \"kamal kishhtanna\",\r\n      \"location\": \"Yavatmall\",\r\n      \"phone\": \"+1 (123) 456-78890\",\r\n      \"courses\": [\"Mathematics\", \"English\", \"Science\",\"Spanish\"]\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/studentexample/6",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"studentexample",
								"6"
							]
						}
					},
					"response": []
				},
				{
					"name": "patch request to update phone no & courses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//assertions for resonse code\r",
									"\r",
									"\r",
									"pm.test(\"testing status code is 200\",()=>{\r",
									"\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"successful get request\",()=>{\r",
									"\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
									"});\r",
									"// assertions for headers\r",
									"pm.test(\"content type header is present\",()=>{\r",
									"\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"  to test the value of content type\",()=>{\r",
									"\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"// assertions for cookies\r",
									"\r",
									"pm.test(\"to test cookie is present\",()=>{\r",
									"\r",
									"    pm.expect(pm.cookies.has('language')).to.be.true;\r",
									"})\r",
									"\r",
									"pm.test(\"to test cookie has a value\",()=>{\r",
									"\r",
									"\r",
									"    pm.expect(pm.cookies.get('language')).to.eql('en-gb')\r",
									"})\r",
									"\r",
									"// test will fail as we dont hav cookies for this test\r",
									"\r",
									"//assertions for response time\r",
									"\r",
									"pm.test(\"response time should be less than 200ms\",()=>{\r",
									"\r",
									"    pm.expect(pm.response.responseTime).to.lessThan(200)\r",
									"})\r",
									"\r",
									"//assertions for response body\r",
									"\r",
									"let jsonData=pm.response.json();\r",
									"pm.test(\" to test  datatype of response\",()=>{\r",
									"\r",
									"    pm.expect(jsonData).to.be.an(\"object\")\r",
									"    pm.expect(jsonData.name).to.be.a(\"string\")\r",
									"    pm.expect(jsonData.id).to.be.a(\"number\")\r",
									"    pm.expect(jsonData.courses).to.be.an(\"array\")\r",
									"})\r",
									"\r",
									"//to test English is part of the courses\r",
									"pm.test(\"to test english is the part of the courses\",()=>{\r",
									"\r",
									"    pm.expect(jsonData.courses).to.include(\"French\")\r",
									"\r",
									"    //courses array must include all listed\r",
									"\r",
									"    pm.expect(jsonData.courses).to.have.members[\"French\",\r",
									"        \"german\"]\r",
									"})\r",
									"\r",
									"//assertions for json fields\r",
									"pm.test(\"to test the value of the fields\",()=>{\r",
									"\r",
									"    //let jsondata=pm.response.json()\r",
									"    pm.expect(jsonData.id).to.eql(6)\r",
									"    pm.expect(jsonData.name).to.eql(\"kamal kishhtanna\")\r",
									"    pm.expect(jsonData.location).to.eql(\"Yavatmall\")\r",
									"    pm.expect(jsonData.phone).to.eql(\"+91 9232666677\")\r",
									"    pm.expect(jsonData.courses[0]).to.eql( \"French\")\r",
									"    \r",
									"    })\r",
									"\r",
									"    //aseertion for schema validation\r",
									"    //schema\r",
									"\r",
									"    //let jsondata=pm.response.json()\r",
									"    var schema=\r",
									"\r",
									"{\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"studentexample\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"id\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"name\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"location\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"phone\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"courses\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              ]\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"id\",\r",
									"            \"name\",\r",
									"            \"location\",\r",
									"            \"phone\",\r",
									"            \"courses\"\r",
									"          ]\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"id\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"name\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"location\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"phone\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"courses\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              ]\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"id\",\r",
									"            \"name\",\r",
									"            \"location\",\r",
									"            \"phone\",\r",
									"            \"courses\"\r",
									"          ]\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"id\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"name\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"location\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"phone\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"courses\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              ]\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"id\",\r",
									"            \"name\",\r",
									"            \"location\",\r",
									"            \"phone\",\r",
									"            \"courses\"\r",
									"          ]\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"id\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"name\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"location\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"phone\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"courses\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              ]\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"id\",\r",
									"            \"name\",\r",
									"            \"location\",\r",
									"            \"phone\",\r",
									"            \"courses\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"studentexample\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\" schema is valid\",()=>{\r",
									"        pm.expect(tv4.validate(jsonData,schema)).to.be.false;\r",
									"    })\r",
									"           "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \r\n    \r\n      \"phone\": \"+91 9232666677\",\r\n      \"courses\": [ \"French\", \"german\"]\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/studentexample/6",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"studentexample",
								"6"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete request to delete record whose id is 13",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/studentexample/13",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"studentexample",
								"13"
							]
						}
					},
					"response": []
				},
				{
					"name": "demo GET request",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"pre request script level at request level\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"testscript level at request level\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/studentexample",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"studentexample"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log(\"pre request script level at folder level\");"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log(\"test script level at folder level\");"
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"console.log(\"pre request script level at collection level\");"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"console.log(\"test script level at collection level\");"
				]
			}
		}
	]
}